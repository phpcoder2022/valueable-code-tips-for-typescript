const linesBetween = [
  'error',
  {
    enforce: [
      { blankLine: 'always', prev: '*', next: 'method' },
      { blankLine: 'always', prev: 'method', next: '*' },
      { blankLine: 'never', prev: 'field', next: 'field' },
    ],
  },
];
module.exports = {
  root: true,
  extends: [
    'eslint:recommended',
    'airbnb-base',
  ],
  parserOptions: {
    ecmaVersion: 2022,
  },
  env: {
    es2022: true,
  },
  overrides: [
    {
      files: ['**/*.ts'],
      parser: '@typescript-eslint/parser',
      parserOptions: {
        project: './tsconfig.json',
        __tsconfigRootDir: __dirname,
      },
      extends: [
        'airbnb-typescript/base',
        'plugin:etc/recommended',
        'plugin:@typescript-eslint/strict-type-checked',
        'plugin:@typescript-eslint/stylistic-type-checked',
      ],
      rules: {
        '@typescript-eslint/no-explicit-any': 'error',
        '@typescript-eslint/explicit-module-boundary-types': 'error',
        '@typescript-eslint/prefer-enum-initializers': 'error',
        '@typescript-eslint/no-mixed-enums': 'error',
        '@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'never' }],
        '@typescript-eslint/lines-between-class-members': linesBetween,
        '@typescript-eslint/consistent-type-definitions': ['error', 'type'],
        '@typescript-eslint/no-use-before-define': 0,
        'consistent-return': 0,
        '@typescript-eslint/no-shadow': 0,
        '@typescript-eslint/no-inferrable-types': 0,
        'import/extensions': ['error', 'never'],
        'etc/no-assign-mutated-array': 0,
        'etc/no-commented-out-code': 1,
        'etc/no-const-enum': 2,
        'etc/throw-error': 2,
      },
    },
    {
      files: ['**/*.d.ts'],
      rules: {
        '@typescript-eslint/unified-signatures': 0,
      },
    },
    {
      files: ['tests/**/*.js'],
      plugins: ['jest'],
      extends: ['plugin:jest/recommended'],
      env: {
        'jest/globals': true,
      },
    },
    {
      files: ['tests/**/main.ts'],
      rules: {
        'etc/no-implicit-any-catch': 0,
      },
    },
  ],
  rules: {
    'no-param-reassign': [2, { props: false }],
    'no-plusplus': 0,
    'no-restricted-syntax': [2, 'WithStatement'],
    'no-shadow': 0,
    'one-var': 0,
    'one-var-declaration-per-line': 0,
    'func-names': 0,
    'prefer-template': 0,
    'prefer-arrow-callback': 0,
    'arrow-parens': 0,
    'arrow-body-style': 0,
    'no-cond-assign': 0,
    'no-continue': 0,
    'no-useless-escape': 0,
    'no-use-before-define': 0,
    'prefer-destructuring': 0,
    'no-return-assign': 0,
    'no-confusing-arrow': 0,
    'max-len': ['error', { code: 110, ignoreComments: true }],
    'no-nested-ternary': 0,
    'no-void': 0,
    'object-shorthand': [2, 'properties'],
    'operator-linebreak': ['error', 'before', {
      overrides: {
        '=': 'after',
        '+=': 'after',
        '-=': 'after',
        '*=': 'after',
        '**=': 'after',
        '/=': 'after',
        '|=': 'after',
        '||=': 'after',
        '&=': 'after',
        '&&=': 'after',
        '??=': 'after',
        '^=': 'after',
        '%=': 'after',
        '>>=': 'after',
        '<<=': 'after',
        '>>>=': 'after',
      },
    }],
    'no-underscore-dangle': 0,
    'object-curly-newline': ['error', { multiline: true, consistent: true }],
    'no-multi-assign': 0,
    camelcase: [2, { properties: 'always' }],
    'default-case-last': 2,
    'default-param-last': 2,
    'no-new-wrappers': 2,
    'no-undefined': 2,
    'no-mixed-operators': 0,
    'no-labels': [2, { allowLoop: true }],
    'no-bitwise': [2, { allow: ['~'] }],
    radix: [2, 'always'],
    'lines-between-class-members': linesBetween,
    'consistent-this': ['error', 'that'],
    'no-invalid-this': 'error',
    'wrap-iife': ['error', 'any'],
    'import/newline-after-import': 0,
    'import/no-named-as-default': 0,
    'import/no-named-as-default-member': 0,
    'import/prefer-default-export': 0,
    'import/no-cycle': 2,
    'import/no-self-import': 2,
    'import/extensions': ['error', 'always'],
    'import/order': [
      'error',
      {
        groups: [
          'builtin',
          'external',
          'internal',
          'parent',
          'index',
          'sibling',
          'object',
          'type',
        ],
      },
    ],
    'import/no-extraneous-dependencies': [
      'error',
      {
        devDependencies: true,
        optionalDependencies: false,
        peerDependencies: false,
      },
    ],
  },
  reportUnusedDisableDirectives: true,
};
